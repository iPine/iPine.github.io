<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>iPine</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ipine.github.io/"/>
  <updated>2018-05-19T08:43:37.638Z</updated>
  <id>http://ipine.github.io/</id>
  
  <author>
    <name>iPine</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Flex布局</title>
    <link href="http://ipine.github.io/2018-05-13/"/>
    <id>http://ipine.github.io/2018-05-13/</id>
    <published>2018-05-13T12:59:00.000Z</published>
    <updated>2018-05-19T08:43:37.638Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做一个关于区块链可视化的前端页面练习，尝试了flex布局，作个简单的summary。</p><h3 id="网页布局"><a href="#网页布局" class="headerlink" title="网页布局"></a>网页布局</h3><p>区块图展示部分刚开始使用的是布局的传统解决方案: 基于盒状模型，依赖<code>display</code>属性+<code>position</code>属性+<code>float</code>属性，后来发现Flex弹性布局更好用，垂直方向居中完全不是问题，盒子换行放置也很easy。</p><p>Flex布局即是一种弹性布局。任何一个容器都可以指定为Flex布局<code>（display:flex）</code>，行内元素也可以使用<code>（display:inline-flex）</code>。</p><blockquote><p>注意：设为Flex布局以后，子元素的float,clear,和vertical-align属性将失去作用。</p></blockquote><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>采用 Flex 布局的元素，称为 Flex 容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称”项目”。</p><h4 id="容器的属性"><a href="#容器的属性" class="headerlink" title="容器的属性"></a>容器的属性</h4><p><img src="http://p8ay1ez22.bkt.clouddn.com/18-5-19/84888199.jpg" alt="容器"></p><p>每个属性对应的含义是：</p><p> • 项目排列方向；可取四个值： <code>row | row-reverse | column | column-reverse</code><br> • 项目是否换行，怎么换；可取三个值： <code>nowrap | wrap | wrap-reverse</code><br> • 前2个属性的简写; 取值： <code>&lt;flex-direction&gt; || &lt;flex-wrap&gt;</code><br> • 项目在主轴上的对齐方式，与主轴的方向有关；可取五个值： <code>flex-start | flex-end | center | space-between | space-around</code><br> • 项目在交叉轴上的对齐方式,与交叉轴的方向有关；可取五个值： <code>flex-start | flex-end | center | baseline | stretch</code><br> • 多根轴线的对齐方式，若项目只有一根轴线，该属性不起作用；可取六个值： <code>flex-start | flex-end | center | space-between | space-around | stretch</code></p><h4 id="项目的属性"><a href="#项目的属性" class="headerlink" title="项目的属性"></a>项目的属性</h4><p><img src="http://p8ay1ez22.bkt.clouddn.com/18-5-19/10672781.jpg" alt="项目"></p><p>每个属性对应的含义是：</p><p> • 项目排列顺序，值越小，排列越靠前；默认为0<br> • 有多余空间时，项目是否放大；默认为0，不放大<br> • 空间不够时，项目是否缩小；默认为1，缩小<br> • 分配多余空间之前，项目占据的主轴空间；默认为auto,即原本大小<br> • <code>flex-grow</code>, <code>flex-shrink</code> 和 <code>flex-basis</code>属性的简写（优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值），常用的两个快捷值： <code>auto(1 1 auto)和none(0 0 auto)</code><br> • 允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性；默认值为auto</p><h3 id="我的布局"><a href="#我的布局" class="headerlink" title="我的布局"></a>我的布局</h3><h4 id="HTML结构"><a href="#HTML结构" class="headerlink" title="HTML结构"></a>HTML结构</h4><p> 1 . 包含所有区块的大div -&gt;.d3layout（容器）；<br> 2 . 大div里包含3个次大div -&gt;.block-row（既是容器又是项目）；<br> 3 . 每个次大div里包含5个或者2个小div -&gt; .block/.block_0（项目）；</p><p><img src="http://p8ay1ez22.bkt.clouddn.com/18-5-19/19741905.jpg" alt="HTML结构"></p><h4 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h4><h5 id="第一层的大div"><a href="#第一层的大div" class="headerlink" title="第一层的大div"></a>第一层的大div</h5><pre><code>.d3layout{    width: 935px;    margin: 20px 0;    height: 740px;/*flex布局容器*/    display: flex;    flex-flow: row wrap;    justify-content: flex-start;    align-items: flex-start;    align-content: space-around;}</code></pre><h5 id="第二层的次大div"><a href="#第二层的次大div" class="headerlink" title="第二层的次大div"></a>第二层的次大div</h5><pre><code>.rowTop,.rowMiddle,.rowBottom{    height: 202px;    width: 935px;/*flex布局项目*/    flex: auto; /*（1，1，auto）*//*flex布局容器*/    display: flex;    flex-flow: row wrap;    justify-content: space-between;    align-items: center;}</code></pre><h5 id="第三层的小div"><a href="#第三层的小div" class="headerlink" title="第三层的小div"></a>第三层的小div</h5><pre><code>.block_0{    width: 703px;    height: 180px;  /*flex布局项目*/     flex: 0 1 auto;}.block{    width: 145px;    height: 180px;/*flex布局项目*/    flex: 0 1 auto;}</code></pre><h4 id="布局效果"><a href="#布局效果" class="headerlink" title="布局效果"></a>布局效果</h4><p>黑色为大div；红色为次大div；灰色为小div</p><p><img src="http://p8ay1ez22.bkt.clouddn.com/18-5-19/86157629.jpg" alt="效果图"></p><p>最终在实践过程中，又添了一层，灰色小div.block里还包括上下两个div，仍然用的flex布局。</p><p>注：<a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html?^%$" target="_blank" rel="noopener">基本概念参考来源</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在做一个关于区块链可视化的前端页面练习，尝试了flex布局，作个简单的summary。&lt;/p&gt;
&lt;h3 id=&quot;网页布局&quot;&gt;&lt;a href=&quot;#网页布局&quot; class=&quot;headerlink&quot; title=&quot;网页布局&quot;&gt;&lt;/a&gt;网页布局&lt;/h3&gt;&lt;p&gt;区块图展示部分刚开
      
    
    </summary>
    
      <category term="technique summary" scheme="http://ipine.github.io/categories/technique-summary/"/>
    
    
      <category term="javascript" scheme="http://ipine.github.io/tags/javascript/"/>
    
      <category term="css" scheme="http://ipine.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>Twice linear</title>
    <link href="http://ipine.github.io/2018-05-07/"/>
    <id>http://ipine.github.io/2018-05-07/</id>
    <published>2018-05-07T13:34:00.000Z</published>
    <updated>2018-05-07T13:41:14.054Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>Consider a sequence u where u is defined as follows:<br>1 . The number u(0) = 1 is the first one in u.<br>2 . For each x in u, then y = 2 <em> x + 1 and z = 3 </em> x + 1 must be in utoo.<br>3 . There are no other numbers in u.<br>Ex: u = [1, 3, 4, 7, 9, 10, 13, 15, 19, 21, 22, 27, …]<br>1 gives 3 and 4, then 3 gives 7 and 10, 4 gives 9 and 13, then 7 gives 15 and 22 and so on…</p><ul><li>Task: Given parameter n the function dbl_linear (or dblLinear…) returns the element u(n) of the ordered (with &lt;) sequence u.</li><li>Example: dbl_linear(10) should return 22</li><li>Note: Focus attention on efficiency</li></ul><h3 id="我的代码"><a href="#我的代码" class="headerlink" title="我的代码"></a>我的代码</h3><pre><code>function dblLinear(n) {    // your code    var res = [1];    var i=0,j=0;    while(res.length &lt;= n){      var y = res[i]*2+1;      var z = res[j]*3+1;      if(y&lt;z){        res.push(y);        i++;      }else if(y==z){        res.push(y);        i++;        j++;      }else{        res.push(z);        j++;      }    }    return res[n];}</code></pre><h3 id="Clever"><a href="#Clever" class="headerlink" title="Clever"></a>Clever</h3><pre><code>function dblLinear(n) { var ai = 0, bi = 0, eq = 0; var sequence = [1]; while (ai + bi &lt; n + eq) {  var y = 2 * sequence[ai] + 1;  var z = 3 * sequence[bi] + 1; if (y &lt; z) {   sequence.push(y);  ai++;  } else if (y &gt; z) {  sequence.push(z);  bi++; } else {   sequence.push(y);  ai++; bi++; eq++;  }} return sequence.pop();}</code></pre><h3 id="Key"><a href="#Key" class="headerlink" title="Key"></a>Key</h3><ul><li>考虑效率问题，就不能将所有值都放入数组，再来排序，去重；且这种解法，不好控制循环的次数；</li><li>想到在push元素进数组时就按从小到大的顺序放入，且遇到相同的元素就只push一次进数组</li><li>具体思路就是每次将y和z中较小的一个放入数组，同时其对应的计数器+1；若y和z相等，放任意一个进数组，两个计算器都+1</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;Consider a sequence u where u is defined as follows:&lt;br&gt;1 . Th
      
    
    </summary>
    
      <category term="technique" scheme="http://ipine.github.io/categories/technique/"/>
    
    
      <category term="javascript" scheme="http://ipine.github.io/tags/javascript/"/>
    
      <category term="codewars" scheme="http://ipine.github.io/tags/codewars/"/>
    
  </entry>
  
  <entry>
    <title>Adding Big Numbers</title>
    <link href="http://ipine.github.io/2018-05-06/"/>
    <id>http://ipine.github.io/2018-05-06/</id>
    <published>2018-05-06T12:31:00.000Z</published>
    <updated>2018-05-06T12:57:11.607Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>We need to sum big numbers and we require your help.<br>Write a function that returns the sum of two numbers. The input numbers are strings and the function must return a string.<br>Example<br>add(“123”, “321”); -&gt; “444”<br>add(“11”, “99”); -&gt; “110”</p><p>Notes</p><ul><li>The input numbers are big.</li><li>The input is a string of only digits</li><li>The numbers are positives</li></ul><h3 id="我的代码"><a href="#我的代码" class="headerlink" title="我的代码"></a>我的代码</h3><pre><code>function add(a, b) {  var arra =a.split(&apos;&apos;);  var arrb =b.split(&apos;&apos;);  var len = a.length &gt; b.length?a.length:b.length;  var result = [];  var count = 0;  for(i=0; i&lt;len; i++){    var temp;    if(i&gt;=a.length){      temp = Number(arrb.pop()) + count;    }else if(i&gt;=b.length){      temp = Number(arra.pop()) + count;    }else{      temp = (Number(arra.pop()) + Number(arrb.pop())) + count;    }    temp &gt;= 10?[temp,count]=[temp-10,1]:count=0;    result.push(temp);  }  result.push(count); // console.log(result);  return result.reverse().join(&apos;&apos;).replace(/^0+/,&apos;&apos;);//   return Number(a) + Number(b); // Fix this!}</code></pre><h3 id="Clever"><a href="#Clever" class="headerlink" title="Clever"></a>Clever</h3><pre><code>function add (a, b) { var res = &apos;&apos;, c = 0 ; a = a.split(&apos;&apos;); b = b.split(&apos;&apos;); while (a.length || b.length || c) {   c += ~~a.pop() + ~~b.pop();  res = c % 10 + res;  c = c &gt; 9; }  return res; }</code></pre><h3 id="Key"><a href="#Key" class="headerlink" title="Key"></a>Key</h3><p>1 . 思路是将a和b的最后一位相加，如果相加的结果大于10，取个位数部分，进位值<code>count+1</code>；并将结果放入到数组中。<br>2 . 要一位一位相加，需要把a和b两个字符串转成字符串数组，用到<code>.split()</code>函数。<br>3 . 还要注意判断a串和b串哪个更长，最后循环完后需要将最后一次的进位值放入数组。<br>4 . 以上步骤得到的数组不是最终结果，还要先<code>翻转</code>，再将字符串数组<code>变成字符串</code>，最后用<code>.replace()</code>方法将首位的0去掉。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;We need to sum big numbers and we require your help.&lt;br&gt;Write 
      
    
    </summary>
    
      <category term="technique" scheme="http://ipine.github.io/categories/technique/"/>
    
    
      <category term="javascript" scheme="http://ipine.github.io/tags/javascript/"/>
    
      <category term="codewars" scheme="http://ipine.github.io/tags/codewars/"/>
    
  </entry>
  
  <entry>
    <title>Find the missing term in an Arithmetic Progression</title>
    <link href="http://ipine.github.io/2018-05-02/"/>
    <id>http://ipine.github.io/2018-05-02/</id>
    <published>2018-05-02T05:42:00.000Z</published>
    <updated>2018-05-02T06:20:58.128Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>An Arithmetic Progression is defined as one in which there is a constant difference between the consecutive terms of a given series of numbers. You are provided with consecutive elements of an Arithmetic Progression. There is however one hitch: exactly one term from the original series is missing from the set of numbers which have been given to you. The rest of the given series is the same as the original AP. Find the missing term.<br>You have to write the function findMissing(list), list will always be at least 3 numbers. The missing term will never be the first or last one.</p><p>Example :<br>findMissing([1,3,5,9,11]) == 7</p><blockquote><p>PS: This is a sample question of the facebook engineer challenge on interviewstreet. I found it quite fun to solve on paper using math, derive the algo that way.</p></blockquote><h3 id="我的代码"><a href="#我的代码" class="headerlink" title="我的代码"></a>我的代码</h3><pre><code>var findMissing = function (list) {   var len = list.length;  var x = Math.abs((list[1]-list[0])) &lt; Math.abs((list[len-1]-list[len-2])) ? Math.abs((list[1]-list[0])):Math.abs((list[len-1]-list[len-2]));  console.log(x);  for(i=0; i&lt;len; i++){    if(list[len-1] &gt; list[0]){      if(list.indexOf(list[i]+x) == -1)      return list[i]+x;    }else if(list[len-1] &lt; list[0]){      if(list.indexOf(list[i]-x) == -1)      return list[i]-x;    }  }}</code></pre><h3 id="Clever"><a href="#Clever" class="headerlink" title="Clever"></a>Clever</h3><pre><code>var findMissing = function (list) {     var step = (list[list.length - 1] - list[0]) / (list.length);     return list.filter(function(val, index) { return val !== (list[0] + index * step); })[0] - step; }</code></pre><h3 id="Key"><a href="#Key" class="headerlink" title="Key"></a>Key</h3><ul><li><p>关键点1要找到等差值，利用题目中给的信息：第一个和最后一个数不会缺失；将这两个数分别与它们的后一个和前一个数相减，小的那个差就是等差值；</p></li><li><p>关键点2要注意数列中可能有负数，按照关键点1求等差值的做法，则求解的时候要取绝对值；且需要判断数列是递增还是递减；</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;An Arithmetic Progression is defined as one in which there is 
      
    
    </summary>
    
      <category term="technique" scheme="http://ipine.github.io/categories/technique/"/>
    
    
      <category term="javascript" scheme="http://ipine.github.io/tags/javascript/"/>
    
      <category term="codewars" scheme="http://ipine.github.io/tags/codewars/"/>
    
  </entry>
  
  <entry>
    <title>Range Extraction</title>
    <link href="http://ipine.github.io/2018-05-01/"/>
    <id>http://ipine.github.io/2018-05-01/</id>
    <published>2018-05-01T05:30:00.000Z</published>
    <updated>2018-05-01T11:47:36.530Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>A format for expressing an ordered list of integers is to use a comma separated list of either<br>• individual integers<br>• or a range of integers denoted by the starting integer separated from the end integer in the range by a dash, ‘-‘. The range includes all integers in the interval including both endpoints. It is not considered a range unless it spans at least 3 numbers. For example (“12, 13, 15-17”)<br>Complete the solution so that it takes a list of integers in increasing order and returns a correctly formatted string in the range format.</p><p>Example:<br>solution([-6, -3, -2, -1, 0, 1, 3, 4, 5, 7, 8, 9, 10, 11, 14, 15, 17, 18, 19, 20]);<br>// returns “-6,-3-1,3-5,7-11,14,15,17-20”</p><h3 id="我的代码"><a href="#我的代码" class="headerlink" title="我的代码"></a>我的代码</h3><pre><code>function solution(list){ // TODO: complete solution  var str = [];  for (i = 0; i &lt; list.length; i++) {    if ((list[i]+1) !== list[i+1]) {//完全没有连续的情况      str += list[i].toString() + &apos;,&apos;;    } else if ((list[i]+1) === list[i+1] &amp;&amp; (list[i+1]+1) === list[i+2] &amp;&amp; (list[i-1]+1) !== list[i]) {//有2个及其以上连续的情况      str += list[i].toString() + &apos;-&apos;;    } else if (str[str.length-1] === &apos;-&apos; &amp;&amp; (list[i]+1) !== list[i+1]) {//判断是否是range的最后一个元素      str += list[i].toString() + &apos;,&apos;;    } else if ((list[i]-1) === list[i-1] &amp;&amp; (list[i]+1) === list[i+1]) {      //属于range中的元素    } else if ((list[i]-1) === list[i-1] &amp;&amp; (list[i-1]-1) === list[i-2]) {//只有2个连续的情况      str += list[i].toString() + &apos;,&apos;;    } else {//新range开头      str += list[i].toString() + &apos;,&apos;;    }  }   return str.slice(0, -1);//去掉最后的逗号}</code></pre><h3 id="Clever"><a href="#Clever" class="headerlink" title="Clever"></a>Clever</h3><pre><code>function solution(list){ for(var i = 0; i &lt; list.length; i++){  var j = i;  while(list[j] - list[j+1] == -1)   j++;  if(j != i &amp;&amp; j-i&gt;1)  list.splice(i, j-i+1, list[i] +&apos;-&apos;+list[j]);  } return list.join();}</code></pre><h3 id="Key"><a href="#Key" class="headerlink" title="Key"></a>Key</h3><ul><li><p><code>.slice()</code> 方法可返回一个新的数组，包含从 start 到 end （不包括该元素）的 arrayObject 中的元素。（含头不含尾）</p><blockquote><p>语法：arrayObject.slice(start,end)</p></blockquote></li><li><p>用到了<code>.splice()</code>方法，替换数组中的内容。</p><blockquote><p>参数包含:（起始下标，替换长度，替换内容）</p></blockquote></li><li><p><code>i</code>记录range开始位置，<code>j</code>记录range结束位置。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;A format for expressing an ordered list of integers is to use 
      
    
    </summary>
    
      <category term="technique" scheme="http://ipine.github.io/categories/technique/"/>
    
    
      <category term="javascript" scheme="http://ipine.github.io/tags/javascript/"/>
    
      <category term="codewars" scheme="http://ipine.github.io/tags/codewars/"/>
    
  </entry>
  
  <entry>
    <title>Sudoku Solution Validator</title>
    <link href="http://ipine.github.io/2018-04-30/"/>
    <id>http://ipine.github.io/2018-04-30/</id>
    <published>2018-04-30T05:29:00.000Z</published>
    <updated>2018-05-06T10:41:57.798Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>Sudoku Background：<br>Sudoku is a game played on a 9x9 grid. The goal of the game is to fill all cells of the grid with digits from 1 to 9, so that each column, each row, and each of the nine 3x3 sub-grids (also known as blocks) contain all of the digits from 1 to 9. </p><p><img src="http://p8ay1ez22.bkt.clouddn.com/18-5-6/15442296.jpg" alt="题目描述"></p><h3 id="我的代码"><a href="#我的代码" class="headerlink" title="我的代码"></a>我的代码</h3><pre><code>function validSolution(board){  //TODO  var flag = 1;  for(j=0; j&lt;9; j++){    var sumcol = 0;    var sum = 0;// 计算列和是否为45    for(i=0; i&lt;9; i++){      sumcol += board[i][j];    }    if(sumcol != 45){        flag = 0;        break;    }// 计算行和是否为45，利用数组的方法求和    board[j].some(function(item,i){      sum += item;    })    if(sum != 45){      flag = 0;      break;    }  }// 计算前9个宫格的和是否为45  var sumgrid = 0;  for(k=0; k&lt;3; k++){       for(l=0; l&lt;3; l++){      sumgrid += board[k][l];    }  }  if(sumgrid != 45){    flag = 0;  }  if(flag){    return true;  }else{    return false;  }}</code></pre><h3 id="Clever"><a href="#Clever" class="headerlink" title="Clever"></a>Clever</h3><pre><code>function equals45(n){ return n == 45;} function validSolution(board){var sumh = [0,0,0,0,0,0,0,0,0]; var sumv = [0,0,0,0,0,0,0,0,0]; osums = [[0,0,0],[0,0,0],[0,0,0]]; for (var i=0;i&lt;9;i++){  for (var j=0;j&lt;9;j++){  sumh[i] += board[i][j];   sumv[j] += board[i][j]; // 这里我认为应该是board[j][i]  osums[Math.floor(i/3)][Math.floor(j/3)] += board[i][j];  } } for (var i=0;i&lt;3;i++) if (!osums[i].every(equals45))   return false;return (sumh.every(equals45) &amp;&amp; sumv.every(equals45)); }</code></pre><h3 id="Key"><a href="#Key" class="headerlink" title="Key"></a>Key</h3><ul><li><code>every()</code>方法只有数组中每一项执行回调函数结果合部为true才会返回，不然就会返回false。</li></ul><p><a href="http://www.jb51.net/article/81360.htm" target="_blank" rel="noopener">常见的数组操作方法</a></p><p>-这个题的做法实质上是不能正确验证是否是数独解。因为若每个cell都是5，满足行、列、每个9宫格的和为45的条件，但不满足数独解的条件。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;Sudoku Background：&lt;br&gt;Sudoku is a game played on a 9x9 grid. T
      
    
    </summary>
    
      <category term="technique" scheme="http://ipine.github.io/categories/technique/"/>
    
    
      <category term="javascript" scheme="http://ipine.github.io/tags/javascript/"/>
    
      <category term="codewars" scheme="http://ipine.github.io/tags/codewars/"/>
    
  </entry>
  
  <entry>
    <title>Directions Reduction</title>
    <link href="http://ipine.github.io/2018-04-28/"/>
    <id>http://ipine.github.io/2018-04-28/</id>
    <published>2018-04-28T13:33:00.000Z</published>
    <updated>2018-04-30T12:05:46.753Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>Write a function which will take an array of strings and return an array of strings with the needless directions removed (WEST and EAST, NORTH and SOUTH cancel each other out).<br>If everything cancels out, return an empty array (stay in place);</p><p>For example:</p><blockquote><p>dirReduc([“NORTH”, “SOUTH”, “SOUTH”, “EAST”, “WEST”, “NORTH”, “WEST”]) =&gt; [“WEST”]<br>dirReduc([“NORTH”, “SOUTH”, “SOUTH”, “EAST”, “WEST”, “NORTH”]) =&gt; []</p></blockquote><h3 id="我的代码"><a href="#我的代码" class="headerlink" title="我的代码"></a>我的代码</h3><pre><code>function dirReduc(arr){  // ...  for(i=0; i&lt;arr.length; i++){    if(arr[i] == &quot;NORTH&quot;){      arr[i] = 1;    }else if(arr[i] == &quot;SOUTH&quot;){      arr[i] = -1;    }else if(arr[i] == &quot;EAST&quot;){      arr[i] = 2;    }else if(arr[i] == &quot;WEST&quot;){      arr[i] = -2;    }  }//   console.log(arr);  for(i=0; i&lt;arr.length; i++){        if(arr[i] + arr[i+1] == 0){        arr.splice(i,2);        i -=2;        continue;      }   }  for(i=0; i&lt;arr.length; i++){    if(arr[i] == 1){      arr[i] = &quot;NORTH&quot;;    }else if(arr[i] == -1){      arr[i] = &quot;SOUTH&quot;;    }else if(arr[i] == 2){      arr[i] = &quot;EAST&quot;;    }else if(arr[i] == -2){      arr[i] = &quot;WEST&quot;;    }  }  return arr;}</code></pre><h3 id="Clever"><a href="#Clever" class="headerlink" title="Clever"></a>Clever</h3><pre><code>function dirReduc(arr) { var str = arr.join(&apos;&apos;), pattern = /NORTHSOUTH|EASTWEST|SOUTHNORTH|WESTEAST/;  while (pattern.test(str))   str = str.replace(pattern,&apos;&apos;); return str.match(/(NORTH|SOUTH|EAST|WEST)/g)||[]; }</code></pre><h3 id="Key"><a href="#Key" class="headerlink" title="Key"></a>Key</h3><ul><li><p>如何考虑重复判断数组arr里是否还有符合要求的字符对？<br>解决办法：下标i回到0，跳出当前循环，又从第一个元素开始判断剩余数组中的内容，重复这个过程，直到没有符合条件的元素</p></li><li><p>删除的数组的某一项用：<code>splice(index,len,[item])</code><br><em>注：该方法会改变原始数组</em><br>splice有3个参数，它也可以用来替换/删除/添加数组内某一个或者几个值<br><code>index</code>:数组开始下标（要删除的元素的下标）<br><code>len</code>: 替换/删除的长度<br><code>item</code>:替换的值，删除操作的话 item为空</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;Write a function which will take an array of strings and retur
      
    
    </summary>
    
      <category term="technique" scheme="http://ipine.github.io/categories/technique/"/>
    
    
      <category term="javascript" scheme="http://ipine.github.io/tags/javascript/"/>
    
      <category term="codewars" scheme="http://ipine.github.io/tags/codewars/"/>
    
  </entry>
  
  <entry>
    <title>BuildTower</title>
    <link href="http://ipine.github.io/2018-04-27/"/>
    <id>http://ipine.github.io/2018-04-27/</id>
    <published>2018-04-27T06:49:00.000Z</published>
    <updated>2018-05-06T10:43:01.941Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>Build a tower like this:<br>    <img src="http://p8ay1ez22.bkt.clouddn.com/18-5-6/66768733.jpg" alt="题目描述"></p><h3 id="我的代码"><a href="#我的代码" class="headerlink" title="我的代码"></a>我的代码</h3><pre><code>function towerBuilder(nFloors) {  // build here  var arr = [];  for(var i=0; i&lt;=nFloors-1; i++){    var stars = i*2+1;    var space = nFloors-1-i;    arr.push(&quot; &quot;.repeat(space) + &quot;*&quot;.repeat(stars) + &quot; &quot;.repeat(space));  }  return arr;  }</code></pre><h3 id="Clever"><a href="#Clever" class="headerlink" title="Clever"></a>Clever</h3><p>分别计算出空格个数和星星个数，将这些字符连接起来成串，放入字符串数组中。</p><h3 id="Key"><a href="#Key" class="headerlink" title="Key"></a>Key</h3><ul><li>如何生成重复字符？ <code>&quot;字符&quot;.repeat(n)</code> 方法</li><li>如何将字符放入数组: 每次单考虑字符串数组中的一个元素，每个元素都是一串字符，用<code>+</code>连接形成字符串（元素），再使用<code>arr.push()</code> 方法将每个元素依次放入数组。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;Build a tower like this:&lt;br&gt;    &lt;img src=&quot;http://p8ay1ez22.bkt
      
    
    </summary>
    
      <category term="technique" scheme="http://ipine.github.io/categories/technique/"/>
    
    
      <category term="javascript" scheme="http://ipine.github.io/tags/javascript/"/>
    
      <category term="codewars" scheme="http://ipine.github.io/tags/codewars/"/>
    
  </entry>
  
  <entry>
    <title>统计数组中元素出现的次数</title>
    <link href="http://ipine.github.io/2018-04-26/"/>
    <id>http://ipine.github.io/2018-04-26/</id>
    <published>2018-04-26T05:50:00.000Z</published>
    <updated>2018-05-06T10:45:40.167Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="http://p8ay1ez22.bkt.clouddn.com/18-5-6/88042726.jpg" alt="题目描述"></p><h3 id="我的代码"><a href="#我的代码" class="headerlink" title="我的代码"></a>我的代码</h3><pre><code>function deleteNth(arr,n){  // ...  var re = [];  var arr1 = {};  for(i=0; i&lt;arr.length; i++){    !arr1[arr[i]] ? arr1[arr[i]] = 1 : arr1[arr[i]] += 1;    if(arr1[arr[i]] &lt;= n)      re.push(arr[i]);  }  return re;}</code></pre><h3 id="Clever"><a href="#Clever" class="headerlink" title="Clever"></a>Clever</h3><pre><code>function deleteNth(arr,x){    var obj = {};    return arr.filter(function(number){        obj[number] = obj[number] ? obj[number] + 1 : 1        return obj[number] &lt;= x    });}</code></pre><h3 id="Key"><a href="#Key" class="headerlink" title="Key"></a>Key</h3><ul><li><p>定义统计数组中每个元素出现的次数的变量应该是个对象：<code>var arr1 = {}</code>; 而不是一个数组 var arr1 = []; （这样每个元素对应一个出现次数，之后就可检索出，出现某个次数的元素）</p></li><li><p>给一个数组(var re = [];)赋值：不是var re = [0];而是应该用<code>.push()</code>方法，<code>re.push(arr[i])</code>;</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://p8ay1ez22.bkt.clouddn.com/18-5-6/88042726.jpg
      
    
    </summary>
    
      <category term="technique" scheme="http://ipine.github.io/categories/technique/"/>
    
    
      <category term="javascript" scheme="http://ipine.github.io/tags/javascript/"/>
    
      <category term="codewars" scheme="http://ipine.github.io/tags/codewars/"/>
    
  </entry>
  
  <entry>
    <title>论文摘要写作思路实践</title>
    <link href="http://ipine.github.io/2018-04-23/"/>
    <id>http://ipine.github.io/2018-04-23/</id>
    <published>2018-04-23T11:09:00.000Z</published>
    <updated>2018-04-25T12:41:56.042Z</updated>
    
    <content type="html"><![CDATA[<h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>第一篇论文是一篇评估论文，在最后改稿阶段，重写了摘要。导师说摘要写得太平淡，读起来像流水账，没有达到发表的标准。<br>正好我那几天读了一篇教人如何写摘要的文章，其中说到摘要写作是有结构可遵循的。于是利用这个机会，就把看到的写作结构拿来实践一番。</p><hr><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><blockquote><p> • 第一句：介绍论文的主题<br> • 第二句：总结以前的工作<br> • 第三句：指出目前的研究有哪些不足之处（没能解决的问题）<br>   前4句介绍想法<br> • 第五句：详细说明研究，解释如何工作的，并讨论你应用它的各种方法<br> • 第六句：总结出为什么你的研究很重要</p></blockquote><h4 id="具体如下："><a href="#具体如下：" class="headerlink" title="具体如下："></a>具体如下：</h4><p>  1 . 引入。思考文章的主题是什么？用一种读者能理解的方式来表达。</p><p>  2 .陈述研究的问题。关键的研究问题是什么？同样，用一个句子表达。第一句话介绍了整个主题，所以现在可以在这个问题上继续讨论，集中在那个主题中的一个关键问题上。</p><p>  3 .用一句话总结为什么至今还没有人能充分的回答/解决你要研究的问题。<br>记住，关键是不要列举人们尝试失败的各种方式，重点是要去说明有一种方法是其他人都没有尝试过的，而这正是你的研究所做的事情。</p><p>  4 .用一句话来解释如何解决这个研究问题的。你在你的研究中采用了什么创新的方法？</p><p>  5 .再一句话说明，你是如何来根据你的想法来实施并完成这项研究的。你是通过科学的实验吗？还是构建了一个软件？或是进行案例研究？这句可能是整个摘要最长的句子。</p><p>  6 .结尾句子，重点放在研究的主要影响是什么？为什么其他人要关心你的研究呢？他们能做什么来进一步研究你的工作。</p><h3 id="我的实践"><a href="#我的实践" class="headerlink" title="我的实践"></a>我的实践</h3><h4 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h4><p><code>1</code><strong>Fuzzy clustering</strong> assigns a probability of membership for a datum to a cluster, which veritably reflects real-world clustering scenarios but significantly increases the complexity of understanding fuzzy clusters. <code>2</code><strong>Many studies</strong> have demonstrated that visualization techniques for multi-dimensional data are beneficial to understand fuzzy clusters. <code>3</code>However, no empirical evidence exists on the effectiveness and efficiency of these visualization techniques <strong>in solving analytical tasks featured by fuzzy clustering</strong>. <code>4</code><strong>In this paper</strong>, we conduct a controlled experiment to evaluate the ability of fuzzy cluster analysis to use four multi-dimensional visualization techniques, namely, parallel coordinate plot, scatterplot matrix, principal component analysis, and Radviz. <code>5</code><strong>First</strong>, we deﬁne the analytical tasks and their representative questions specific to fuzzy cluster analysis. <strong>Then</strong>, we design objective questionnaires to compare the accuracy, time, and satisfaction in using the four techniques to solve the questions. <strong>We also</strong> design subjective questionnaires to collect the experience of volunteers with the four techniques in terms of ease of use, informativeness, and helpfulness. <code>6</code> With a complete experiment process and a detailed result analysis, we test against four hypotheses that are formulated on the basis of our experience, and <strong>provide instructive guidance</strong> for analysts in selecting appropriate and efficient visualization techniques to analyze fuzzy clusters.</p><hr><p>这个摘要基本达到了上面提到的6句话结构，除了第5部分，因为不能用一句话写完，因而用了连词衔接几句话。</p><p><em>PS: 这是论文摘要的最终版本。中途经历了很多次修改，自己改，导师也改，才写出不像流水账的感觉：）</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;原因&quot;&gt;&lt;a href=&quot;#原因&quot; class=&quot;headerlink&quot; title=&quot;原因&quot;&gt;&lt;/a&gt;原因&lt;/h3&gt;&lt;p&gt;第一篇论文是一篇评估论文，在最后改稿阶段，重写了摘要。导师说摘要写得太平淡，读起来像流水账，没有达到发表的标准。&lt;br&gt;正好我那几天读了一篇
      
    
    </summary>
    
      <category term="method" scheme="http://ipine.github.io/categories/method/"/>
    
    
      <category term="paper" scheme="http://ipine.github.io/tags/paper/"/>
    
  </entry>
  
  <entry>
    <title>论文Latex排版-初入坑</title>
    <link href="http://ipine.github.io/2018-03-27/"/>
    <id>http://ipine.github.io/2018-03-27/</id>
    <published>2018-03-27T09:35:11.000Z</published>
    <updated>2018-05-02T06:17:28.765Z</updated>
    
    <content type="html"><![CDATA[<h3 id="入坑缘由"><a href="#入坑缘由" class="headerlink" title="入坑缘由"></a><strong>入坑缘由</strong></h3><p>在第一篇研究生投稿论文进入尾声之即，开始学习用<strong>Latex</strong>排版。在此之前，只会用<em>word</em>，别谈什么工具整理参考文献，一切全凭耐心，手动操作。</p><h3 id="模板说明"><a href="#模板说明" class="headerlink" title="模板说明"></a><strong>模板说明</strong></h3><p>由于准备投稿的会议对排版格式有要求，所以在<a href="http://junctionpublishing.org/vgtc/Tasks/camera.html" target="_blank" rel="noopener"><em>官网</em></a>下了参考模板。</p><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a><strong>准备</strong></h3><ul><li>(La)Tex编辑器：Texworks</li><li>格式要求说明/参考模板</li><li>一篇paper</li></ul><h3 id="启动编辑器"><a href="#启动编辑器" class="headerlink" title="启动编辑器"></a><strong>启动编辑器</strong></h3><p>我安装的是Tex Live套装，里面包含texworks。启动方法：</p><blockquote><p>搜索应用程序TeXworks 或者 启动命令窗口cmd，输入TeXworks回车<br>使用texworks的原因及具体的texworks界面介绍<a href="https://liam0205.me/2014/09/08/latex-introduction/" target="_blank" rel="noopener"><em>请参见这里</em></a>。</p></blockquote><p>几乎所有设置都保持默认，只需根据自己需求在工具栏选择排版工具。我主要用到的排版工具是 <em>pdfLaTeX</em> 和 <em>BibTeX</em>。</p><h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a><strong>遇到的问题</strong></h3><p> 1 . 注释，引用，引号，斜体，加粗，换行，章节格式，Section简写，行内公式编辑等基本规则<br> 2 . 图片和表格如何引用，单栏和双栏图片如何设置<br> 3 . 表格绘制，版面占据调整，行距，居中怎么实现<br> 4 . 参考文献排版</p><h4 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a><strong>基本语法</strong></h4><p>章节和段落是 <code>\section{} , \subsection{} , \paragraph {}</code><br>有参考模板可以直接将内容替换成自己的，格式就会是预设效果。花括号里写上要使用该格式的内容。</p><p>注释是<code>%</code>，引用<code>\cite{}</code>，加粗 <code>\textbf{}</code>，斜体 <code>\emph{}</code>，换行是双反斜杠 <code>\\</code>，引号包括前引号<code>~</code>和后引号 <code>&#39;&#39;</code>， 章节缩写，根据章节层级数不同而略有区别，例如：section3 ， 缩写引用格式为，<code>\sectionautorefname{}</code> ,花括号里写上具体章节数3 ，得到的最终效果为<code>Sect.3</code>。 再往下一级走，只需添加<code>sub</code>前缀。</p><p>此次论文只有行内公式，具体格式为双美元符内编辑公式<code>$...$</code>，至于公式符号及运算符号,可<a href="https://blog.csdn.net/ying_xu/article/details/51240291" target="_blank" rel="noopener"><em>参考整理</em></a>。</p><h4 id="图片及表格引用，单双栏设置"><a href="#图片及表格引用，单双栏设置" class="headerlink" title="图片及表格引用，单双栏设置"></a><strong>图片及表格引用，单双栏设置</strong></h4><p>不用手动给图片和表格编号，使用<code>\aotoref{}</code>标签即可自动编号，花括号内填<code>label</code>内自己定义的名称。以一个图为例：</p><pre><code>\begin{figure*}[tb] %[tb]表示表格放置在页面上的位置，需要特别注意这里的*号，%若没有它，那么图片会浮在文字上方。添加`*`号，使后面width设置成文本宽度生效\centering % avoid the use of \begin{center}...\end{center} and use \centering instead (more compact) 水平居中设置\includegraphics[scale=1,width=\textwidth]{Fig3.png} %scale设置缩放比例，width设置图片占据的宽度，这里设置成与文本同宽，即双栏；最后一个花括号写要加载的图片名称，默认路径是放在pictures文件夹\caption{} %这里写图题 \label{fig:3} %这里自己定义，引用时用\end{figure*}</code></pre><p>width的宽度还可以为<code>\columnwidth</code>，即为单栏宽度。表格引用与图片类似。</p><h4 id="表格绘制"><a href="#表格绘制" class="headerlink" title="表格绘制"></a><strong>表格绘制</strong></h4><p>目前尝试过的方式有两种：</p><ul><li>手动写LaTeX语法</li><li>线上生成LaTeX语法</li><li>所见即所得方式</li></ul><p>对于手动方式绘制表格，即按照语法，在编辑框内添加。例如添加下图所示的一个三线表：<br><img src="https://i.loli.net/2018/03/25/5ab7a0f41aa75.png" alt="TIM截图20180325211429.png"></p><p>基本语法格式为：</p><pre><code> \begin{table}[tb]\renewcommand\arraystretch{1.5} %控制行距\caption{Datasets used for evaluation.} \label{tab:tabele-2}\scriptsize% \centering% %下面一句是控制整个表格的位置，只占据单栏\resizebox{\columnwidth}{!}{%\begin{tabu}{%lccc} %控制单元格内容居中方式 \toprule\textbf{Datasets} &amp; \textbf{Data Items} &amp; \textbf{Dimensions} &amp; \textbf{Clusters}\\ \midruleIris\cite{F1}(for training) &amp; 150 &amp; 4 &amp; 3 \\Glass\cite{F1} &amp; 214 &amp; 9 &amp; 6 \\Dermatology\cite{F1} &amp; 259 &amp; 34 &amp; 6  \\Heart Disease\cite{F1}(for training) &amp; 303 &amp; 14 &amp; 5 \\Synthetic\cite{F2} &amp; 750 &amp; 12 &amp; 4  \\Concretec\cite{F1} &amp; 1030 &amp; 9 &amp; 4  \\Pendigitsc\cite{F3} &amp; 2498 &amp; 63 &amp; 10  \\ \bottomrule\end{tabu}%}\end{table}</code></pre><p>手动键入以上示例代码还能接受，当表格复杂时，手动绘制线条和控制跨行跨列就显得繁琐，也容易出错。于是有了第二种方式，线上生成LaTeX代码。使用的线上生成LaTeX表格的工具叫<em><a href="http://www.tablesgenerator.com/latex_tables#" target="_blank" rel="noopener">Tables Generator</a></em>，界面简洁，操作方式简单。粘贴或上传表格数据后，表格样式设计与excel操作类似，设计完成后，下方会自动生成LaTeX代码。然后将代码粘贴到相应排版内容处就OK了。</p><p>排版“大表格”时出现了一些问题：</p><p> 1 . 占据双栏，表格太大（宽），页面放不下，且浮在文字上方，用<code>*</code>也解决不了问题；<br> 2 . 占据单栏，大表格变成了mini表格，整体缩小了一两倍；</p><p><strong>解决办法：</strong> 在求助冬哥后，从他发给我的一篇帖子里找到灵感,问题在于一行文字太长没有换行 <img src="https://i.loli.net/2018/03/26/5ab84d2582a35.png" alt="TIM截图20180325214634.png"><br><a href="http://blog.163.com/chen_dawn/blog/static/1125063201318115613703" target="_blank" rel="noopener">原贴参见这里</a><br>强制换行之后，表格基本合格了，但仍然存在问题：</p><ul><li>按照模板预设的格式单元格内容应该垂直居中，实际效果没有；</li><li>单元格太窄，显得字体很挤</li></ul><p>解决这两个问题的过程中，发现了一篇帖子，推“所见即所得”的插入表格法。于是有了下面第三种方式的尝试。主要步骤有3步：</p><p>   1 . 用excel排版好表格，保存成.pdf格式<br>   2 . 用pdfcrop工具（LaTeX工具包内）将刚保存的PDF文件中图片边上的白色剪裁掉。方法如下：<br>将要剪裁的pdf文件与pdfcrop.exe放在同一个文件夹下；然后打开cmd命令行，通过cd进入所在的文件夹；<em>(快捷打开方式：删除当前目录路径，键入cmd，回车）</em> 最后输入<code>pdfcrop input.pdf output.pdf</code><br><code>input.pdf</code> 和 <code>output.pdf</code> 是输入和输出的pdf文件名，改为自己的文件名即可。点击回车之后，output.pdf就会出现在当前文件夹下。 </p><ol start="3"><li><p>在latex中插入“表格”。具体而言，与插入图片的源码类似：</p><p>  \begin{table}<br>  \centering<br>  \includegraphics[width=0.75 \textwidth]{output.pdf}<br>  \caption{Table Caption}<br>  \label{tab:tab-for-table}<br>  \end{table}</p></li></ol><p>采用第三种方式可以解决上面两个问题。但是排版出来的效果图不是很满意，绘制的线条从excel转成pdf时，样式发生了改变，线条看起来比较粗，跟预设效果不一致。</p><p>最终找到了两个问题的解决办法：</p><ul><li>问题1，垂直居中问题主要出现在多行控制的单元格，于是在代码里改变了其所控制的行数，使其居中。后面的<code>{*}</code>控制宽度，*表示自适应<br><img src="https://i.loli.net/2018/03/25/5ab7b1174287d.png" alt="TIM截图20180325222351.png"></li><li>问题2，可以给表格设置行距解决：<br><img src="https://i.loli.net/2018/03/25/5ab7b2f96e642.png" alt="TIM截图20180325223205.png"></li></ul><h4 id="参考文献排版"><a href="#参考文献排版" class="headerlink" title="参考文献排版"></a><strong>参考文献排版</strong></h4><ul><li>参考文献涉及到<em>BibTeX</em>工具。</li><li>操作流程及原理讲解<a href="https://zhuanlan.zhihu.com/p/25013341?refer=jeldor-latex" target="_blank" rel="noopener"><em>请参见这里</em></a></li></ul><p><strong>说明</strong><br> 1 . 根据不同要求，采用的文献引用格式不同，<code>\bibliographystyle{abbrv-doi}</code><br> 2 . 文献数据库名自己定义，<code>\bibliography{&lt;文献数据库名&gt;}</code><br> 3 . 文献数据库是一个<code>.bib</code>文件，里面的内容，可以使用在线工具<a href="https://search.crossref.org/?q=%20Advances%20in%20fuzzy%20clustering%20and%20its%20applications" target="_blank" rel="noopener"><em>Crossref</em></a> 生成<br> 4 . 参考文献生成的编译顺序：</p><blockquote><p>pdfLaTeX -&gt; BibTeX -&gt; pdfLaTeX -&gt; pdfLaTeX</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;入坑缘由&quot;&gt;&lt;a href=&quot;#入坑缘由&quot; class=&quot;headerlink&quot; title=&quot;入坑缘由&quot;&gt;&lt;/a&gt;&lt;strong&gt;入坑缘由&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;在第一篇研究生投稿论文进入尾声之即，开始学习用&lt;strong&gt;Latex&lt;/strong&gt;
      
    
    </summary>
    
      <category term="method" scheme="http://ipine.github.io/categories/method/"/>
    
    
      <category term="tool" scheme="http://ipine.github.io/tags/tool/"/>
    
      <category term="paper" scheme="http://ipine.github.io/tags/paper/"/>
    
  </entry>
  
  <entry>
    <title>表达自己的需求</title>
    <link href="http://ipine.github.io/2018-03-25/"/>
    <id>http://ipine.github.io/2018-03-25/</id>
    <published>2018-03-25T09:06:00.000Z</published>
    <updated>2018-04-16T03:45:19.512Z</updated>
    
    <content type="html"><![CDATA[<h3 id="《人性的弱点》"><a href="#《人性的弱点》" class="headerlink" title="《人性的弱点》"></a><em>《人性的弱点》</em></h3><p>&emsp;&emsp;我们要学会表达真实的自己，遇到不开心的事要主动跟朋友说；为难的工作要主动跟领导说；碍于情面不敢说出口的拒绝要勇敢说出来，只有这样，我们才能与他人建立真实的关系，交到真心的朋友。不然我们永远只能孤身一人扮演“热心肠好人”。<br>&emsp;&emsp;我们要在说话与行动前，多想想自己的需求，要问自己：“我这样说自己会快乐吗？”“我这么做自己会幸福吗？”<br>在我们以往的人生中，把太多注意力放在了别人身上，现在我们要重新聚焦于自己，爱自己、关心自己，为此</p><blockquote><p>我们必须建立一个个原则，要有原则地拒绝和坚持，而不是无底线地迎合和付出。</p></blockquote><p>&emsp;&emsp;只有这样，我们才能让别人看到自己的底线，清楚自己的原则，才能从人情世故中获得真正的解脱。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;《人性的弱点》&quot;&gt;&lt;a href=&quot;#《人性的弱点》&quot; class=&quot;headerlink&quot; title=&quot;《人性的弱点》&quot;&gt;&lt;/a&gt;&lt;em&gt;《人性的弱点》&lt;/em&gt;&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;我们要学会表达真实的自己，遇到不开心的事要主动跟朋友说；为
      
    
    </summary>
    
      <category term="read" scheme="http://ipine.github.io/categories/read/"/>
    
    
      <category term="reading notes" scheme="http://ipine.github.io/tags/reading-notes/"/>
    
  </entry>
  
  <entry>
    <title>黑客与画家</title>
    <link href="http://ipine.github.io/2018-02-27/"/>
    <id>http://ipine.github.io/2018-02-27/</id>
    <published>2018-02-27T13:04:00.000Z</published>
    <updated>2018-04-30T08:45:38.927Z</updated>
    
    <content type="html"><![CDATA[<p> 以下内容是阅读《黑客与画家》时，摘录的关于计算机的一些基础知识。</p><hr><h3 id="低级语言"><a href="#低级语言" class="headerlink" title="低级语言"></a>低级语言</h3><h4 id="什么叫机器语言"><a href="#什么叫机器语言" class="headerlink" title="什么叫机器语言"></a>什么叫机器语言</h4><p> 计算机和其他机器一样，也有一张操作命令清单。比如，可以命令计算机把两个数相加。这种操作命令的总和就是计算机的机器语言（machine language）。</p><h4 id="什么叫汇编语言"><a href="#什么叫汇编语言" class="headerlink" title="什么叫汇编语言"></a>什么叫汇编语言</h4><p> 命令清单还是一样，只是将语言换成更人性化的表达，如计算机中的加，用机器语言表达就是11001101，汇编中就是<code>add</code>。</p><blockquote><p>机器语言和汇编语言的共同问题就是，只能让大多数计算机做一些很简单的事情。</p></blockquote><h4 id="为什么使用低级语言"><a href="#为什么使用低级语言" class="headerlink" title="为什么使用低级语言"></a>为什么使用低级语言</h4><p>当考虑效率问题时。</p><blockquote><p>如果你非常关注运行速度，那么最好使用接近机器的语言。</p></blockquote><p>比如说，C 语言就是一种低层次语言，很接近硬件，几乎堪称可移植的汇编语言。大多数操作系统都是用C语言写的。</p><p><em>那么问题来了，硬件速度越来越快了，底层次语言的作用越来越小，为什么不抛弃C语言呢？</em></p><p><em>原因：人们可能想保留缓存区溢出攻击，使得程序员保持警惕！</em></p><h4 id="缓存区溢出攻击"><a href="#缓存区溢出攻击" class="headerlink" title="缓存区溢出攻击"></a>缓存区溢出攻击</h4><p>当你在C语言中为输入的内容分配出一片内存（<code>缓存</code>）时，它会被分配在当前运行代码的<code>返回地址</code>旁边。</p><ul><li><code>返回地址</code>：指的是一块特定内存，当前代码运行完毕以后，就要运行这块内存中包含的代码。</li><li><code>缓冲区(buffer）</code>: 一个内存区域，用来保存程序需要的输入数据，或者将程序的输出数据累积起来，到一定数量后再输出。</li></ul><p>假定有人打算入侵你的计算机，他们猜出你会为某种输入分配256字节的<code>缓存</code>，于是他们就提交<strong>多于256字节的内容</strong>，目的是覆盖旁边的<code>返回地址</code>。那么，当前代码运行完毕之后，程序的控制权就交给了他们指定的内存地址。这个地址通常是缓存的首地址，当中放的是入侵者事前编好的机器码。于是，入侵者的程序就运行在你的计算机上了。</p><p>在C语言中，一旦接受用户输入的时候<strong>没有检查输入长度</strong>，就创造出了一个安全漏洞。利用这种漏洞的攻击行为就被称为<code>缓存区溢出攻击</code>。</p><blockquote><p>如果使用更抽象的高级语言，上面的事情是不可能发生的。</p></blockquote><h3 id="高级语言-与低级语言的关系"><a href="#高级语言-与低级语言的关系" class="headerlink" title="高级语言,与低级语言的关系"></a>高级语言,与低级语言的关系</h3><p>简便方式书写程序所用的语言就是高级语言，其优点是使得程序更具有可移植性，而不同计算机的机器语言是不一样的。</p><p>高级语言（简便方式书写的程序，就像一行<code>if</code> 语句）可以通过编译器转变为低级语言（硬件可以理解的语言）。</p><h3 id="编译器与解释器区别"><a href="#编译器与解释器区别" class="headerlink" title="编译器与解释器区别"></a>编译器与解释器区别</h3><p><code>编译器</code> 不是低级语言唯一的实现方法，另一种方法是使用<code>解释器</code>。</p><ul><li>解释器： 实时地将代码解释为相应的机器语言，然后一行行运行。</li><li>编译器： 先将整个程序全部翻译成机器语言，然后再运行。</li></ul><blockquote><p>当编程语言变得很抽象时，就可完全脱离硬件，但是问题是太抽象的话，能解决的问题太少。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt; 以下内容是阅读《黑客与画家》时，摘录的关于计算机的一些基础知识。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;低级语言&quot;&gt;&lt;a href=&quot;#低级语言&quot; class=&quot;headerlink&quot; title=&quot;低级语言&quot;&gt;&lt;/a&gt;低级语言&lt;/h3&gt;&lt;h4 id=&quot;什么叫机器语言&quot;&gt;&lt;a
      
    
    </summary>
    
      <category term="read" scheme="http://ipine.github.io/categories/read/"/>
    
    
      <category term="reading notes" scheme="http://ipine.github.io/tags/reading-notes/"/>
    
  </entry>
  
  <entry>
    <title>黑客与画家</title>
    <link href="http://ipine.github.io/2018-01-19/"/>
    <id>http://ipine.github.io/2018-01-19/</id>
    <published>2018-01-19T11:27:00.000Z</published>
    <updated>2018-04-30T08:06:54.400Z</updated>
    
    <content type="html"><![CDATA[<p> 以下内容是阅读《黑客与画家》时，我摘录的一些个人觉得有意思和值得回味的观点。</p><hr><ul><li><h3 id="Popular-的解释"><a href="#Popular-的解释" class="headerlink" title="Popular 的解释"></a><em>Popular</em> 的解释</h3></li></ul><blockquote><p>“受欢迎”的英语单词是popular，这个词还有另一个意思，“大众化的，多数人的”，比如popular support（民意的支持）。此处使用了双关语，作者既是说青少年的行为目的是为了得到同伴的关注和称赞，也是说青少年这样做是为了与群体保持一致。</p></blockquote><ul><li><h3 id="老成-的真实意思"><a href="#老成-的真实意思" class="headerlink" title="老成 的真实意思"></a><em>老成</em> 的真实意思</h3></li></ul><blockquote><p>成年人使用“老成”（tact）这个词，含义似乎就是“闭上嘴巴，不要说话”。我以为它与“缄默”（tacit）和“不苟言笑”（taciturn）有着相同的词根，字面意思就是安静。我就对自己发誓，我绝不要变成“老成”的人，没有人能够让我闭上嘴巴。可是事实上，这个词的词根与“触觉”（tactile）相同，它真正的意思是熟练的碰触。“老成”的反义词是“笨拙”（clumsy）。 </p></blockquote><ul><li><h3 id="创造-优美的事物"><a href="#创造-优美的事物" class="headerlink" title="创造 优美的事物"></a>创造 <em>优美的事物</em></h3></li></ul><blockquote><p>与其说优秀的软件设计师是工程师，还不如说是建筑师[插图]在英语中，“建筑师”（architect）和“架构师”（architect）是同一个词，所以这里用的是双关语，意思是优秀程序员不仅负责建造，还负责架构。后一句中的“建筑学”（architecture）也是这种双关用法，同时指“架构学”（architecture）。</p></blockquote><blockquote><p>优美的软件并不总是论文的合适题材。</p></blockquote><p>1 .首先，科学研究必须具有原创性。<br>2 .其次，科学研究必须是能够产生大量成果的，而那些不成熟的、障碍重重的领域最容易写出许多篇论文，因为你可以写那些为了完成工作、你不得不克服的障碍。没有什么比一个错误的前提更容易产生大量待解决的问题了。</p><p>创造优美事物的方式往往不是从头做起，而是在现有成果的基础上做一些小小的调整，或者将已有的观点用比较新的方式组合起来。这种类型的工作很难用研究性的论文表达。那么，为什么大学和实验室还把论文数量作为考核黑客工作的指标呢？这种事情其实在日常生活中普遍存在，比如，我们使用代码的行数考核程序员的工作效率。。这样的考核容易实施，而容易实施的考核总是首先被采用。</p><ul><li><h3 id="把控细节"><a href="#把控细节" class="headerlink" title="把控细节"></a>把控细节</h3></li></ul><blockquote><p>他(达芬奇)对作品每一部分的认真程度完全不取决于预料中会不会有人仔细看这个部分。他就像篮球巨星迈克尔·乔丹（Michael Jordan），每一球都一丝不苟，绝不降低对自己的要求。<br>坚持一丝不苟，就能取得优秀的成果。因为那些看不见的细节累加起来，就变得可见了。</p></blockquote><p><strong>(这个原则跟上次的反思里，学习学姐的做事态度是一样的，放在自身就是对待学术，写论文要一丝不苟，把细节做好，不断拓宽思路。在写程序上还处于初步阶段，更应该一丝不苟，细节处理到位才行，每一次的修订都是进步，长久积累下来就是看得见的长进。)</strong></p><ul><li><h3 id="思考“不能说的话”"><a href="#思考“不能说的话”" class="headerlink" title="思考“不能说的话”"></a>思考“不能说的话”</h3></li></ul><blockquote><p>有人可能会问，为什么要去找出“不能说的话”？为什么要故意打探那些龌龊的、见不得人的思想观点？你明知那里有挡住去路的石头，为什么还要把它们翻过来看个究竟呢？</p></blockquote><p>1 .首先，我这样做与小孩子翻石头是出于同样的原因：纯粹的好奇心。我对任何被禁止的东西都有特别强烈的好奇心。我要亲眼看一下，然后自己做决定。<br>其次，我这样做是因为我不喜欢犯错。如果像其他时代一样，那些我们自以为正确的事情将来会被证明是荒谬可笑的，我希望自己能够知道是哪些事情，这样可以使我不会上当。</p><p>2 .再次，我这样做，是因为这是很好的脑力训练。想要做出优秀作品，你需要一个什么问题都能思考的大脑。尤其是那些似乎不应该思考的问题，你的大脑也要养成思考它们的习惯。<br>我认为这样做不可取，更好的方法是在思想和言论之间划一条明确的界线。在心里无所不想，但是不一定要说出来。我就鼓励自己在心里默默思考那些最无法无天的想法。你的思想是一个地下组织，绝不要把那里发生的事情一股脑说给外人听。</p><ul><li><h3 id="“元标签”（meta-label）"><a href="#“元标签”（meta-label）" class="headerlink" title="“元标签”（meta-label）"></a>“元标签”（meta-label）</h3></li></ul><blockquote><p>所谓“元标签”，就是对某个标签的抽象描述。如果人们开始讨论元标签，那么原来的标签反而不会受到注意了。举例来说，“政治正确”（political correctness）就是一个“元标签”，是许多特定现象的总称。这个词现在被广泛使用，其实这恰恰意味着“政治正确”的时代正在开始消亡，因为它使得你可以从总体上攻击这个现象，而不会受到指控，不会被说成支持某一种特定的“政治不正确”现象。</p></blockquote><p>如果一个命题不是错的，却被加上各种标签，进行压制和批判，那就有问题。因为只要不是错的观点，就不应该被压制讨论。所以每当你看到有些话被攻击为出自××分子或××主义，这就是一个明确的信号，表明背后有问题。不管在1630年还是在2030年，都是如此。当你听到有人在用这样的标签，就要问为什么。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt; 以下内容是阅读《黑客与画家》时，我摘录的一些个人觉得有意思和值得回味的观点。&lt;/p&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;h3 id=&quot;Popular-的解释&quot;&gt;&lt;a href=&quot;#Popular-的解释&quot; class=&quot;headerlink&quot; title=&quot;Popular 的
      
    
    </summary>
    
      <category term="read" scheme="http://ipine.github.io/categories/read/"/>
    
    
      <category term="reading notes" scheme="http://ipine.github.io/tags/reading-notes/"/>
    
  </entry>
  
  <entry>
    <title>反思</title>
    <link href="http://ipine.github.io/2018-01-17/"/>
    <id>http://ipine.github.io/2018-01-17/</id>
    <published>2018-01-17T01:49:00.000Z</published>
    <updated>2018-04-16T14:10:48.413Z</updated>
    
    <content type="html"><![CDATA[<p><em>1月16日，老师在群里怼学姐，当时大家都很懵，也很无语。但是通过他们的对话，我觉得我应该学习学姐的优点并反思自己工作中的不足。</em></p><p>对我来说：</p><p>1 .CMH学姐的细心和细节思考的态度和做论文的方式值得我学习。</p><p>2 .SYM学姐的论文整理、每日进度汇报方式值得借鉴，特别注意借鉴好的便利的工具能取得较好的效果。</p><p>3 .有自己的做事风格，对于老师交代的事要完成并且要有自己的思考，去细化和充实内容，这样才能让他人感受到你在认真对待手中的事，在用脑子去做，而不是为了应付任务。</p><p>4 .下图是老师发飙后第二天，走路时想到的就记在了手机便签上。</p><p><img src="http://i1.bvimg.com/641774/6ae668705272c538t.jpg" alt="1-17反思"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;em&gt;1月16日，老师在群里怼学姐，当时大家都很懵，也很无语。但是通过他们的对话，我觉得我应该学习学姐的优点并反思自己工作中的不足。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;对我来说：&lt;/p&gt;
&lt;p&gt;1 .CMH学姐的细心和细节思考的态度和做论文的方式值得我学习。&lt;/p&gt;
&lt;p&gt;2 .S
      
    
    </summary>
    
      <category term="work" scheme="http://ipine.github.io/categories/work/"/>
    
    
      <category term="essay" scheme="http://ipine.github.io/tags/essay/"/>
    
  </entry>
  
  <entry>
    <title>看在出门前</title>
    <link href="http://ipine.github.io/2017-07-31/"/>
    <id>http://ipine.github.io/2017-07-31/</id>
    <published>2017-07-31T05:16:11.000Z</published>
    <updated>2018-04-16T03:42:27.959Z</updated>
    
    <content type="html"><![CDATA[<h3 id="《人性的弱点》"><a href="#《人性的弱点》" class="headerlink" title="《人性的弱点》"></a><em>《人性的弱点》</em></h3><blockquote><ul><li>今天我要让自己很开心。</li></ul></blockquote><p>&emsp;&emsp;林肯说过“多半的人都可以决定自己拥有更多的快乐。”快乐来源于内心，并非外来之物</p><blockquote><ul><li>今天我要调适自己。</li></ul></blockquote><p>&emsp;&emsp;而不是调整世界来配合我。我要让自己配合自己的家庭、事业与机遇。</p><blockquote><ul><li>今天我要照顾自己的身体。</li></ul></blockquote><p>&emsp;&emsp;我要运动，关心它、滋养它、不滥用它、不忽略它，让它变成我心灵的殿堂。</p><blockquote><ul><li>今天我要强化心灵。</li></ul></blockquote><p>&emsp;&emsp;我要学习，不让心灵闲置，阅读需要聚精会神才能读懂的读物。</p><blockquote><ul><li>今天我要让自己怡人。</li></ul></blockquote><p>&emsp;&emsp;使自己看起来愉悦，穿着合宜，轻声慢语，举止恰当，多予赞赏，少作批评，不找任何事的毛病，也不挑任何人的缺点。</p><blockquote><ul><li>今天要全心全意只活这一天，不去想自己的整个人生。</li></ul></blockquote><p>&emsp;&emsp;一天工作12小时固然很好，如果想到一辈子都要如此，可能会先吓坏自己。</p><blockquote><ul><li>今天我要制定计划。</li></ul></blockquote><p>&emsp;&emsp;计划今天要做的事。可能不能完全遵行，但还是要计划，为的是避免仓促及犹豫不决。</p><blockquote><ul><li>今天我要给自己保留一点轻松时间。</li></ul></blockquote><p>&emsp;&emsp;用这些时间思考，想想自己的人生远景。</p><blockquote><ul><li>今天我将无所畏惧，我不怕更快乐、更享受人生的美好；也不怕失去爱人，相信爱我的人亦爱我。</li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;《人性的弱点》&quot;&gt;&lt;a href=&quot;#《人性的弱点》&quot; class=&quot;headerlink&quot; title=&quot;《人性的弱点》&quot;&gt;&lt;/a&gt;&lt;em&gt;《人性的弱点》&lt;/em&gt;&lt;/h3&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;今天我要让自己很开心。&lt;/li&gt;
&lt;/ul&gt;
      
    
    </summary>
    
      <category term="read" scheme="http://ipine.github.io/categories/read/"/>
    
    
      <category term="reading notes" scheme="http://ipine.github.io/tags/reading-notes/"/>
    
  </entry>
  
  <entry>
    <title>2016.1.5</title>
    <link href="http://ipine.github.io/2016-01-05/"/>
    <id>http://ipine.github.io/2016-01-05/</id>
    <published>2016-01-05T09:09:00.000Z</published>
    <updated>2018-04-16T05:48:34.346Z</updated>
    
    <content type="html"><![CDATA[<p>我喜欢那个能够按时按计划按想象去成为的我，也喜欢现在的这个自己。</p><p>生活本来就是个最具变量的东西，没有任何人可以确定自己的明天，明天想要的会不会跟今天一样，现在视若珍宝的，是否转眼就会弃如敝履。可是换取的，永远跟失去的一样多。而那些不曾预料的获得，比胸有成竹要更喜出望外。</p><hr><p>我知道我终将成为更好的人。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我喜欢那个能够按时按计划按想象去成为的我，也喜欢现在的这个自己。&lt;/p&gt;
&lt;p&gt;生活本来就是个最具变量的东西，没有任何人可以确定自己的明天，明天想要的会不会跟今天一样，现在视若珍宝的，是否转眼就会弃如敝履。可是换取的，永远跟失去的一样多。而那些不曾预料的获得，比胸有成竹要更
      
    
    </summary>
    
      <category term="life" scheme="http://ipine.github.io/categories/life/"/>
    
    
      <category term="essay" scheme="http://ipine.github.io/tags/essay/"/>
    
  </entry>
  
  <entry>
    <title>岁月神偷</title>
    <link href="http://ipine.github.io/2015-12-29/"/>
    <id>http://ipine.github.io/2015-12-29/</id>
    <published>2015-12-29T07:10:00.000Z</published>
    <updated>2018-04-16T05:05:18.184Z</updated>
    
    <content type="html"><![CDATA[<p>《岁月神偷》片中任达华饰演倔强又好强的父亲，无论是猛烈台风来临时，还是儿子被疾病缠身时，他总是倾尽所有来关爱亲人。最令人印象深刻的是任达华通过“手”的细节所展现的演技。父亲为了患癌儿子能输上新鲜血液，当掉戒指露出让人心疼的深深戒痕；为了在儿子墓前栽下可以遮荫的树，父亲的手被划伤满是触目惊心的血痕；而吴君如在戏里更是颠覆了大笑姑婆的本色，但是却保有了她的伶牙俐齿和积极的心态</p><blockquote><p>一步难，一步佳，难一步，佳一步，难又一步，佳又一步，日子总要信，总要过。最好的时光里过着苦大于甜的生活。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;《岁月神偷》片中任达华饰演倔强又好强的父亲，无论是猛烈台风来临时，还是儿子被疾病缠身时，他总是倾尽所有来关爱亲人。最令人印象深刻的是任达华通过“手”的细节所展现的演技。父亲为了患癌儿子能输上新鲜血液，当掉戒指露出让人心疼的深深戒痕；为了在儿子墓前栽下可以遮荫的树，父亲的手被
      
    
    </summary>
    
      <category term="life" scheme="http://ipine.github.io/categories/life/"/>
    
    
      <category term="movie" scheme="http://ipine.github.io/tags/movie/"/>
    
  </entry>
  
  <entry>
    <title>如何阅读一本书</title>
    <link href="http://ipine.github.io/2015-11-26/"/>
    <id>http://ipine.github.io/2015-11-26/</id>
    <published>2015-11-26T09:09:00.000Z</published>
    <updated>2018-04-16T05:23:15.769Z</updated>
    
    <content type="html"><![CDATA[<p>四个阶段：</p><h2 id="基础阅读"><a href="#基础阅读" class="headerlink" title="基础阅读"></a>基础阅读</h2><p>（大部分已具备，就是一些识字能力）</p><h2 id="检视阅读一"><a href="#检视阅读一" class="headerlink" title="检视阅读一"></a>检视阅读一</h2><p>（即有系统的略读或粗读）</p><h3 id="如何做："><a href="#如何做：" class="headerlink" title="如何做："></a>如何做：</h3><p>1 .先看书名页<br>2 .研究目录页，基本框架做概括性理解<br>3 .有索引要检阅，有关键词目<br>4 .新书，可阅读出版社信息<br>5 .对目录有大概概括后挑选几个跟主题相关的章节来读<br>6 .打开书东翻下西翻下，随时寻找主要论点的讯号，最后两三页不要忽略<br>这是一种非常主动的阅读，一个人若不够灵活就没法集中精力来阅读，就没法进行检视阅读。跟随步骤做就不会读着读着就走神进入白日梦状态。</p><h2 id="检视阅读二"><a href="#检视阅读二" class="headerlink" title="检视阅读二"></a>检视阅读二</h2><p>（粗浅的阅读）<br>头一次面对难读得书时，从头到尾先读一遍，碰到不懂的不要停下来查询或思索。理解能理解的部分，不懂的可以略读跳过，在查询思考前至少保证已扫读过一遍。<br>这个规则同样适用于论说性作品。<br>检视阅读：快速阅读，应该要掌握什么时候用什么样的阅读速度去读，一本好书总有部分值得放慢阅读速度</p><blockquote><p>想要读得好，一个主动、自我要求的读者，就得采取一些行动。任何一个超越基础阅读的层次其核心就是要努力提出问题（然后尽可能找出答案），这是绝不可或忘的原则。</p></blockquote><h2 id="如何做一个自我要求的读者"><a href="#如何做一个自我要求的读者" class="headerlink" title="如何做一个自我要求的读者"></a>如何做一个自我要求的读者</h2><p>提出四个问题：<br>1 .这本书到底在说什么？<br>2 .作者细部说了什么，怎么说的？<br>3 .说得有道理吗？<br>4 .这本书跟你有什么关系？若是得到了资讯，有什么意义？若还有启示，就必须找出更深的建议。</p><h2 id="如何让一本书真正属于自己"><a href="#如何让一本书真正属于自己" class="headerlink" title="如何让一本书真正属于自己"></a>如何让一本书真正属于自己</h2><p>做笔记不可缺，课可采用的方法：<br>1 .勾画<br>2 .在栏外再加注强调，或是某段太长，可在段外加记号<br>3 .记号强调重要的声明或段落即可<br>4 .编号，某个论点发出一串重要陈述<br>5 .参照标记，Cf，不同地方阐述同一点，有助于集中想法<br>6 .空白页对书的问题或答案记录，最后一页写作者的主要观点。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;四个阶段：&lt;/p&gt;
&lt;h2 id=&quot;基础阅读&quot;&gt;&lt;a href=&quot;#基础阅读&quot; class=&quot;headerlink&quot; title=&quot;基础阅读&quot;&gt;&lt;/a&gt;基础阅读&lt;/h2&gt;&lt;p&gt;（大部分已具备，就是一些识字能力）&lt;/p&gt;
&lt;h2 id=&quot;检视阅读一&quot;&gt;&lt;a href=&quot;#检视
      
    
    </summary>
    
      <category term="read" scheme="http://ipine.github.io/categories/read/"/>
    
    
      <category term="reading notes" scheme="http://ipine.github.io/tags/reading-notes/"/>
    
  </entry>
  
</feed>
